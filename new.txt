import { useState } from "react";
import {openAIApi} from 
import "./App.css";

function App() {
  const [message, setMessage] = useState("");
  const [chats, setChats] = useState([]);
  const [isTyping, setIsTyping] = useState(false);

  const chat = async (e, message) => {
    e.preventDefault();

    if (!message) return;
    setIsTyping(true);

    let msgs = [...chats]; // Create a new array instead of modifying the original state directly
    msgs.push({ role: "user", content: message });
    setChats(msgs);

    setMessage("");

    const openaiEndpoint = "https://api.openai.com/v1/chat/completions";
    const headers = {
      Authorization: `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,
      "Content-Type": "application/json",
    };

    const requestData = {
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: "You are a ChatGPT. You can help with various tasks.",
        },
        ...msgs, // Use the updated messages array
      ],
    };

    try {
      const response = await fetch(openaiEndpoint, {
        method: "POST",
        headers: headers,
        body: JSON.stringify(requestData),
      });

      if (response.ok) {
        const responseData = await response.json();
        msgs.push(responseData.choices[0].message);
        setChats(msgs);
        setIsTyping(false);

        console.log(
          "Response from chatbot:",
          responseData.choices[0].message.content
        );
      } else {
        console.error("Error:", response.statusText);
      }
    } catch (error) {
      console.error("Error:", error);
    }
  };

  return (
    <main>
      <h1>Chat AI Tutorial</h1>

      <section>
        {chats && chats.length
          ? chats.map((chat, index) => (
              <p key={index} className={chat.role === "user" ? "user_msg" : ""}>
                <span>
                  <b>{chat.role.toUpperCase()}</b>
                </span>
                <span>:</span>
                <span>{chat.content}</span>
              </p>
            ))
          : ""}
      </section>

      <div className={isTyping ? "" : "hide"}>
        <p>
          <i>{isTyping ? "Typing" : ""}</i>
        </p>
      </div>

      <form action="" onSubmit={(e) => chat(e, message)}>
        <input
          type="text"
          name="message"
          value={message}
          placeholder="Type a message here and hit Enter..."
          onChange={(e) => setMessage(e.target.value)}
        />
      </form>
    </main>
  );
}

export default App;
